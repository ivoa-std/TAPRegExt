<!-- the template that, when formatting the schema, becomes the IVOA spec
for TAPRegExt.

Based in part on Ray Plante's vor2ivoaspec.xsl.
-->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                xmlns="http://www.w3.org/2001/XMLSchema" 
                xmlns:vm="http://www.ivoa.net/xml/VOMetadata/v0.1" 
                xmlns:vr="http://www.ivoa.net/xml/VOResource/v1.0" 
                version="1.0">
<xsl:import href="vor2spec.xsl"/>

<xsl:output method="xml"/>

<xsl:template match="xs:complexType|xs:simpleType" mode="xsddef" xml:space="preserve">
<div class="schemaOuter">
<a name="s:{@name}">
</a><div class="schemaHeader"><xsl:apply-templates select="." mode="schemaDefTitle"/></div>
<div class="schemaInner">
<pre><xsl:apply-templates select="." mode="xsdcode"/></pre>
</div></div>
    </xsl:template>

    <xsl:template match="xs:complexType[xs:simpleContent]" mode="content"/>

    <xsl:template match="xs:complexType" mode="content" xml:space="preserve">
<p>
<table border="2" width="100%" id="d:{@name}">
<thead>
  <tr><th colspan="2" align="left"><xsl:apply-templates select="." mode="MetadataTitle"/></th>
  </tr><tr><th>Element</th><th>Definition</th>
</tr></thead>
<tbody>
<xsl:apply-templates select=".//xs:element" mode="content"/>
</tbody>
</table>
</p>
    </xsl:template>

    <xsl:template match="xs:simpleType" mode="content"/>

    <xsl:template match="xs:complexType|xs:simpleType" mode="attributes">
      <xsl:if test=".//xs:attribute" xml:space="preserve">
<p>
<table border="2" width="100%">
<thead>
  <tr><th colspan="2" align="left"><xsl:apply-templates select="." mode="attributeTitle"/></th>
  </tr><tr><th>Attribute</th><th>Definition</th>
</tr></thead>
<tbody>
<xsl:apply-templates select=".//xs:attribute" mode="attributes"/>
</tbody>
</table>
</p>
      </xsl:if>
    </xsl:template>

    <xsl:template match="xs:element" mode="content" xml:space="preserve">
  <tr><td valign="top"><xsl:value-of select="@name"/></td>
      <td valign="top"><table border="0" width="100%"><tbody>
<xsl:apply-templates select="." mode="nextContentItem"/>      </tbody></table>
  </td></tr>
    </xsl:template>

    <xsl:template match="xs:attribute" mode="attributes" xml:space="preserve">
  <tr><td valign="top"><xsl:value-of select="@name"/></td>
      <td valign="top"><table border="0" width="100%"><tbody>
<xsl:apply-templates select="." mode="nextContentItem"/>      </tbody></table>
  </td></tr>
    </xsl:template>

    <xsl:template match="xs:element" mode="content.rmname">
        <xsl:param name="row" select="1"/>

        <xsl:for-each select="." xml:space="preserve">          <tr bgcolor="#dddddd"><td nowrap="nowrap" valign="top"><em>RM Name:</em></td>
              <td valign="top"><xsl:for-each select="xs:annotation/xs:appinfo/vm:dcterm" xml:space="default">
              <xsl:if test="position()!=1">
                 <xsl:text>, </xsl:text>
              </xsl:if>
              <xsl:value-of select="."/>
            </xsl:for-each></td>
          </tr>
</xsl:for-each>
    </xsl:template>

    <xsl:template match="xs:element|xs:attribute" mode="content.type">
        <xsl:param name="row" select="1"/>

        <xsl:variable name="type">
           <xsl:choose>
              <xsl:when test="@type">
                 <xsl:apply-templates select="@type" mode="type"/>
              </xsl:when>
              <xsl:otherwise>
                 <xsl:apply-templates select="xs:complexType|xs:simpleType" 
                                      mode="type"/>
              </xsl:otherwise>
           </xsl:choose>
        </xsl:variable>

        <xsl:variable name="color">
           <xsl:call-template name="rowBgColor">
              <xsl:with-param name="row" select="$row"/>
           </xsl:call-template>
        </xsl:variable>

        <xsl:for-each select="." xml:space="preserve">          <tr bgcolor="{$color}"><td nowrap="nowrap" valign="top"><em>Value type:</em></td>
              <td valign="top"><xsl:copy-of select="$type"/></td>
          </tr>
</xsl:for-each>
    </xsl:template>

    <xsl:template match="xs:element|xs:attribute" mode="content.meaning">
        <xsl:param name="row" select="1"/>

        <xsl:variable name="color">
           <xsl:call-template name="rowBgColor">
              <xsl:with-param name="row" select="$row"/>
           </xsl:call-template>
        </xsl:variable>

        <xsl:for-each select="." xml:space="preserve">          <tr bgcolor="{$color}"><td nowrap="nowrap" valign="top"><em>Semantic Meaning:</em></td>
              <td valign="top" width="90%"><xsl:value-of select="xs:annotation/xs:documentation[1]"/></td>
          </tr>
</xsl:for-each>
    </xsl:template>

    <xsl:template match="xs:attribute" mode="content.default">
        <xsl:param name="row" select="1"/>

        <xsl:variable name="color">
           <xsl:call-template name="rowBgColor">
              <xsl:with-param name="row" select="$row"/>
           </xsl:call-template>
        </xsl:variable>

        <xsl:for-each select="." xml:space="preserve">          <tr bgcolor="{$color}"><td nowrap="nowrap"
              valign="top"><em>Default Value:</em></td>
              <td valign="top" width="90%"><code><xsl:value-of select="@default"/></code></td> 
          </tr>
</xsl:for-each>
    </xsl:template>

    <xsl:template match="xs:element|xs:attribute" mode="content.occurrences">
        <xsl:param name="row" select="1"/>

        <xsl:variable name="color">
           <xsl:call-template name="rowBgColor">
              <xsl:with-param name="row" select="$row"/>
           </xsl:call-template>
        </xsl:variable>

        <xsl:for-each select="." xml:space="preserve">          <tr bgcolor="{$color}"><td nowrap="nowrap" valign="top"><em>Occurrences:</em></td>
              <td valign="top"><xsl:apply-templates select="." mode="occurrences"/></td>
          </tr>
</xsl:for-each>
    </xsl:template>

    <xsl:template match="xs:element|xs:attribute" mode="content.allowedValues">
        <xsl:param name="row" select="1"/>
        <xsl:param name="type" select="@type"/>

        <xsl:variable name="color">
           <xsl:call-template name="rowBgColor">
              <xsl:with-param name="row" select="$row"/>
           </xsl:call-template>
        </xsl:variable>

        <xsl:for-each select="." xml:space="preserve">          <tr bgcolor="{$color}"><td nowrap="nowrap" valign="top"><em>Allowed Values:</em></td>
              <td valign="top"><xsl:apply-templates select="xs:simpleType/xs:restriction|/xs:schema/xs:simpleType[@name=substring-after($type,':')]/xs:restriction" mode="howtolist" /></td> 
          </tr>
</xsl:for-each>
    </xsl:template>

    <xsl:template match="xs:restriction[xs:enumeration]" mode="howtolist">
      <xsl:choose>
        <xsl:when test="xs:enumeration/xs:annotation/xs:documentation"
                  xml:space="preserve"><table border="0" width="100%"><tbody>
<xsl:apply-templates select="xs:enumeration" mode="controlledVocab" />
              </tbody></table></xsl:when>
        <xsl:otherwise>
           <xsl:for-each select="xs:enumeration">
              <code><xsl:value-of select="@value"/></code>
              <xsl:if test="position()!=last()">
                 <xsl:text>, </xsl:text>
              </xsl:if>
</xsl:for-each>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:template>

    <xsl:template match="xs:enumeration" mode="controlledVocab" xml:space="preserve">
                 <tr><td valign="top"><code><xsl:value-of select="@value"/></code> </td>
                     <td><xsl:value-of select="xs:annotation/xs:documentation"/></td></tr>
    </xsl:template>

    <xsl:template match="xs:element|xs:attribute" mode="content.comment">
        <xsl:param name="row" select="1"/>

        <xsl:variable name="color">
           <xsl:call-template name="rowBgColor">
              <xsl:with-param name="row" select="$row"/>
           </xsl:call-template>
        </xsl:variable>

        <xsl:for-each select="." xml:space="preserve">          <tr bgcolor="{$color}"><td nowrap="nowrap" valign="top"><em>Comments:</em></td>
              <td valign="top"><xsl:for-each select="xs:annotation/xs:documentation[position() > 1]">
<p><xsl:value-of select="."/></p>
              </xsl:for-each></td> 
          </tr>
</xsl:for-each>
    </xsl:template>



    <xsl:template name="rowBgColor">
       <xsl:param name="row" select="1"/>
       <xsl:choose>
          <xsl:when test="$row mod 2 = 1">#dddddd</xsl:when>
          <xsl:otherwise>#f5f5f5</xsl:otherwise>
       </xsl:choose>
    </xsl:template>    

<xsl:template match="/">

<html>
<xsl:comment>

======================
DO NOT EDIT THIS FILE.  
======================

It is generated from spec.xsl.in. Changes here will be lost.

</xsl:comment>
<head>
<title>TAPRegExt Working Draft 2011-03-15</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>

<style type="text/css">
<![CDATA[
code { 
  font-weight: bold;
  font-family: monospace 
} 

div.admonition {
  margin-left: 3em;
  background: #DDBBBB;
  padding-top: 0.5ex;
  padding-bottom: 0.5ex;
  padding-left: 0.5em;
  padding-right: 0.5em;
  border: 1px solid #EE9999;
}

div.admonition:before {
  content: 'Note';
  font-weight: bold;
}

body {
	counter-reset: section;
	counter-reset: toc_section;
}

ul.toc  li.numbered {
	counter-increment: toc_section;
}

ul.toc  li.numbered:before {
	content: counter(toc_section) " ";
}

ul.subtoc {
	counter-reset: toc_subsection;
}

ul.subtoc  li.numbered {
	counter-increment: toc_subsection;
	list-style-type: none;
}

ul.subtoc  li.numbered:before {
	content: counter(toc_section) "." counter(toc_subsection) " ";
}

h2.numbered {
	counter-increment: section;
	counter-reset: subsection;
}

h2.numbered:before {
	content: counter(section) " ";
}

h3.numbered {
	counter-increment: subsection;
}

h3.numbered:before {
	content: counter(section) "." counter(subsection) " ";
}

.figure {
	margin-bottom: 4ex;
}

.figure img {
	position: relative;
	width: 100%;
}

p.caption {
	font-style: italic;
}

span.redax {
	background-color: #FFFF90;
	font-style: italic;
}
]]>
</style>


<link href="http://www.ivoa.net/misc/ivoa_wd.css" rel="stylesheet" type="text/css" />
</head>
<body>

<div class="head">
<a href="http://www.ivoa.net/"><img alt="IVOA" src="http://www.ivoa.net/pub/images/IVOA_wb_300.jpg" width="300" height="169"/></a>
<h1>TAPRegExt: a VOResource Schema Extension for Describing TAP Services<br/>
Version 1.0</h1>
<h2>IVOA Working Draft 15 March 2011</h2>

<dl>
  <dt>This version:</dt>
  <dd>
    <a href="http://www.ivoa.net/Documents/TAPRegExt/WD-TAPRegExt-1.0-20110315.html">http://www.ivoa.net/Documents/TAPRegExt/WD-TAPRegExt-1.0-20110315.html</a></dd>

  <dt>Latest version:</dt>

  <dd>
    <a href="http://www.ivoa.net/Documents/TAPRegExt/">http://www.ivoa.net/Documents/TAPRegExt/</a></dd>

  <dt>Previous versions:</dt>

  <dd>
    <a href="http://www.ivoa.net/Documents/TAPRegExt/WD-TAPRegExt-0.1-20100127.html">http://www.ivoa.net/Documents/TAPRegExt/WD-TAPRegExt-0.1-20100127.html</a></dd>

</dl>

<dl>
  <dt>Working Group:</dt>
    <dd><a href="http://www.ivoa.net/twiki/bin/view/IVOA/IvoaResReg"> http://www.ivoa.net/twiki/bin/view/IVOA/IvoaWGResReg</a></dd>

  <dt>Author(s):</dt>
    <dd>
      <a href="http://www.ivoa.net/cgi-bin/twiki/bin/view/IVOA/MarkusDemleitner">Markus Demleitner</a><br/>
      <a href="http://www.ivoa.net/cgi-bin/twiki/bin/view/IVOA/PatrickDowler">Patrick Dowler</a><br/>
      <a href="http://www.ivoa.net/cgi-bin/twiki/bin/view/IVOA/RayPlante">Ray Plante</a><br/>
      <a href="http://www.ivoa.net/cgi-bin/twiki/bin/view/IVOA/GuyRixon">Guy Rixon</a><br/>
      <a href="http://www.ivoa.net/cgi-bin/twiki/bin/view/IVOA/MarkTaylor">Mark Taylor</a><br/>
    </dd>
</dl>
<hr/></div>

<h2>Abstract</h2>

<p>This document describes an XML encoding standard for metadata about
services implementing the table access protocol TAP <a
href="#ref_TAP">[TAP]</a>, referred to as TAPRegExt.  Instance documents are
part of the service's registry record or can be obtained from the service
itself.  They deliver information to both humans and software on the languages,
output formats, and upload methods supported by the service, as well as data
models implemented by the exposed tables, user defined functions per language,
and certain limits enforced by the service.</p>

<div class="status">
<h2>Status of this Document</h2>
<p>The first release of this document was 2011 Jan 27.</p>


<p>This is an IVOA Internal Working Draft for review by IVOA members and other interested parties.<br/>
It is a draft document and may be updated, replaced, or obsoleted by other documents at any time.
It is inappropriate to use IVOA Working Drafts as reference materials or to cite them as other than "work in progress".</p>


</div><br />

<h2>Acknowledgments</h2>

<p>This document has been developed with support from the German
Astronomical Virtual Observatory (BMBF Bewilligungsnummer 05A08VHA).
FILL-IN: Anyone else wants to be here?</p>

<p>This document borrows extensively from the StandardsRegExt 
<a href="#ref_SRE">[SRE]</a> document.</p>

<h2>Syntax Notation Using XML Schema</h2>

<p>The eXtensible Markup Language, or XML, is document syntax for marking
textual information with named tags and is defined by the
World Wide Web Consortium (W3C) Recommendation XML 1.0
<a href="#ref_XML">[XML]</a>.  The set of XML tag names and the syntax
rules for their use is referred to as the document schema.  One way to
formally define a schema for XML documents is using the W3C standard
known as XML Schema <a href="#ref_XSD">[XSD]</a>.</p>

<p>This document defines the TAPRegExt schema using XML Schema.  The
full Schema document is listed in <a href="#appA">Appendix A</a>.
Parts of the schema appear within the main sections of this document;
however, documentation nodes have been left out for the sake of brevity.</p>

<p>Reference to specific elements and types defined in the VOResource
schema include the namespaces prefix, <code>vr</code>, as in
<code class="xstype">vr:Resource</code> (a type defined in the VOResource schema).
Reference to specific elements and types defined in the TAPRegExt
schema include the namespaces prefix, <code>tr</code>, as in
<code class="xstype">tr:TableAccess</code> (a type defined in the TAPRegExt schema).
Use of the <code>tr</code> prefix in compliant instance documents is 
strongly recommended, particularly in the applications that involve
IVOA Registries.  Elsewhere, the use is not required.</p>



<h2>Contents</h2>
<!-- ToC is currently generated manually; grep '<h. class="toc' spec.xsl.in 
and edit the result.

Just have heads class="toc as first attribute in heads intended for the
ToC.  The class numbered adds enumeration for body sections. -->

<ul class="toc">
<li class="toc numbered"><a href="#sec1">Introduction</a>
<ul class="subtoc">
<li class="toc numbered"><a href="#sec1_1">Example Document</a></li>
<li class="toc numbered"><a href="#sec1_2">Dependencies on other IVOA Standards</a></li>
</ul></li>
<li class="toc numbered"><a href="#sec2">The <code class="xstype">tr:TableAccess</code> Extension</a>
<ul class="subtoc">
<li class="toc numbered"><a href="#nsloc">The Schema Namespace and Location</a></li>
<li class="toc numbered"><a href="#dms">Declaring Instantiated Data Models</a></li>
<li class="toc numbered"><a href="#langs">Languages Supported</a></li>
<li class="toc numbered"><a href="#outforms">Output Formats</a></li>
<li class="toc numbered"><a href="#uploadmethods">Upload Methods</a></li>
<li class="toc numbered"><a href="#reslimits">Resource Limits</a></li>
<li class="toc numbered"><a href="#caprec">The Capability Record</a></li>
</ul></li>
<li class="toc"><a href="#appA">Appendix A: The Full Schema</a></li>
<li class="toc"><a href="#appB">Appendix B: Implementations</a></li>
<li class="toc"><a href="#appC">Appendix C: Changes from Previous Versions</a></li>
<li class="toc"><a href="#references">References</a></li>
</ul>


<h2 class="toc numbered" id="sec1">Introduction</h2>

<p>The Table Access Protocol TAP (see <a href="#ref_TAP">[TAP]</a>) allows
VO clients to send queries to remote database servers and receive the
results in standard formats.  In addition, it defines means to discover
database schemata on the remote side, to upload data from the local disk
or third-party hosts, and more.  TAP builds upon a variety of other
standards, premier among which is the Universal Worker Service (see 
<a href="#ref_UWS">[UWS]</a>), which describes how client and server
can negotiate the execution of a query and the retrieval of results
without having to maintain a continuous connection.</p>

<p>To accomodate a wide variety of requirements, the TAP specification
offers implementors many choices on optional features, resource limits, or
locally defined functionality.  One purpose of TAPRegExt is to allow the
service to communicate such choices to remote clients using the mechanisms
laid down in the VO Service Interfaces standard (cf. <a
href="#ref_VOSI">[VOSI]</a>).</p>

<p>Clients also need to discover TAP services offering certain kinds of data.
Central to this is the concept of a registry where resources can be
described and thus discovered by users and applications in the VO. Registries
receive resource descriptions as defined in IVOA standard VOResource: an XML
Encoding Schema for Resource Metadata <a href="#ref_VOR">[VOR]</a>. In this
schema, support for a standard service protocol is described as a service's
capability; the associated metadata is contained within the service resource
description's <tt>&amp;lt;capability&amp;gt;</tt> element.</p>

<p>TAPRegExt defines this capability element for TAP services.  In the context
of registering TAP services, an important role filled by TAPRegExt is the 
communication of supported data models to the registry.</p>

<h3 class="toc numbered" id="sec1_1">Example Document</h3>

<p>As an example, here is an instance document as it might be 
returned from a VOSI capability endpoint:</p>

<pre><![CDATA[
<!-- INCLUDESAMPLE -->
]]></pre>

<h3 class="toc numbered" id="sec1_2">TAPRegExt within the VO Architecture</h3>

<div class="figure">
<img src="TAPRegExt-arch.png" alt="TAPRegExt within the VO architecture"/>
<p class="caption"><strong>Figure 1:</strong> IVOA Architecture diagram with TAPRegExt and
the related standards marked up.</p>
</div>

<p>This specification directly relates to other IVOA standards in the following
ways:</p>

<dl>
<dt>VOResource, v1.03 <a href="#ref_VOR">[VOR]</a></dt>
<dd>Descriptions of services that support TAP are encoded
using the VOResource XML Schema. TAPRegExt is an extension 
of the VOResource core schema.</dd>
<dt>TAP, v1.0 <a href="#ref_TAP">[TAP]</a></dt>
<dd>The TAP standard describes some of the concepts the declaration
of which is the scope of TAPRegExt; the standard indirectly
refers to this document in the specification of its capabilities endpoint.</dd>
<dt>UWS, v1.0 <a href="#ref_UWS">[UWS]</a></dt>
<dd>The TAP standard describes additional concepts the declaration
of which is the scope of TAPRegExt.</dd>
<dt>StandardsRegExt <a href="#ref_SRE">[SRE]</a></dt>
<dd>TAPRegExt uses the StandardKeyEnumeration mechanism introduced
in StandardsRegExt to define controlled vocabularies.</dd>
</dl>

<p>This standard also relates to other IVOA standards:</p>
<dl>
<dt>IVOA Standard Interface, v1.0 <a href="#ref_VOSI">[VOSI]</a></dt>
<dd>VOSI describes the standard interfaces to discover metadata about
services; this document describes the response TAP services should
provide on the <code>capabilities</code> endpoint described by VOSI.</dd>
<dt>IVOA defined data models</dt>
<dd>The IVOA defines data models database tables can conform to in order
to facilitate cross-service queries.  The first example of those is
<a href="#ref_OT">[ObsTAP]</a>.  The support for queries against such
data models is noted within TAPRegExt instance documents.</dd>
</dl>

<h2 class="toc numbered" id="sec2">The <code class="xstype">tr:TableAccess</code> Extension</h2>

<h3 class="toc numbered" id="nsloc">The Schema Namespace and Location</h3>

<p>The namespace associated with TAPRegExt VOResource extensions will be
<code>http://www.ivoa.net/xml/TAPRegExt/v1.0</code>.  
Just like the namespace URI for the VOResource schema, the
TAPRegExt namespace URI can be interpreted as a URL.  Resolving it
will return the XML Schema document (given in <a href="#appA">Appendix A</a>)
that defines the TAPRegExt schema.</p>

<p>Authors of VOResource instance documents may choose to
provide a location for the VOResource XML Schema document and its
extensions using the
<a href="http://www.w3.org/TR/xmlschema-0/#schemaLocation"><code
>xsi:schemaLocation</code></a> attribute.  While the author is
free to choose any schema location, this specification
recommends using the TAPRegExt namespace URI as its location URL
(as illustrated in the example above), as in,</p>

<blockquote>
<pre>xsi:schemaLocation="http://www.ivoa.net/xml/TAPRegExt/v1.0
                    http://www.ivoa.net/xml/TAPRegExt/v1.0"</pre>
</blockquote>

  <div class="admonition">
  <p>The IVOA Registry Interface standard <a href="#RI">[RI]</a>
       actually <em>requires</em> that the VOResource records it
       shares with other registries provide location URLs via
       <code>xsi:schemaLocation</code> for the VOResource schema and
       all legal extension schemas that are used in the records.  This
       rule would apply to the TAPRegExt schema.</p>
  </div>

<h3 class="toc numbered" id="dms">Declaring Instantiated Data Models</h3>

<p>The IVOA defines certain data models that can be instantiated in database
tables exposed by a TAP service.  This allows a query built exclusively
on a data model or a set of data models to work on all TAP services exposing
table(s) instantiating the data model(s).</p>

<p>In TAPRegExt, a data model is identified by its IVOA id.  The first example
for such a data model is ObsTAP (see <a href="#ref_OT">[OT]</a>).</p>

<xsl:apply-templates select="//xs:complexType[@name='DataModelType']" mode="def"/>

<h3 class="toc numbered" id="langs">Languages Supported</h3>

<p>TAP services may offer a variety
of query languages.  What languages are available is defined using the
<code>language</code> element.  TAP defines values of the 
<code>LANG</code> parameter to have either the form 
<code>&lt;name&gt;-&lt;version&gt;</code>
or the form <code>&lt;name&gt;</code>, where the latter form
leaves the
choice of the version to the server.  Therefore, a language is defined using a
name and one or more versions.  All compliant TAP services must at least
declare ADQL.</p>

<p>The recommended way to associate larger amounts of documentation with a
language entry in a capability element is via registration of the language
using the mechanisms defined in <a href="#ref_SRE">[SRE]</a> and associate the
registry record with the language element through the latter's ivo-id
attribute.  The only language mandatory for TAP services, ADQL 2.0, has a
registry record at <tt>ivo://ivoa.net/ADQL/2.0</tt></p>

<xsl:apply-templates select="//xs:complexType[@name='Language']" mode="def"/>

<p>Many query languages, first and foremost ADQL, have the notion of user defined
functions, i.e., functions not defined in the ADQL standard but added by
the operators of the service.  A standard way to communicate those to
the user is via the <code class="xstype">tr:UserDefinedFunction</code> 
type.</p>

<p>Specifying function names, arguments, their types and return value(s)
in a structured form is at least hard, in particular if the formalism should
work for languages other than ADQL (which may have optional or named arguments,
complex return types, etc).  Therefore, function signatures are defined
using a simple plain text representation.  For ADQL, the content of
the signature element must match the <code>signature</code> nonterminal
in the following grammar:</p>

<pre><![CDATA[
  signature ::= <funcname> <arglist> "->" <type_name>
  funcname ::= <regular_identifier>
  arglist ::= "(" <arg> { "," <arg> } ")"
  arg ::= <regular_identifier> <type_name>
]]></pre>

<p><code>regular_identifier</code> is defined in <a href="#ref_ADQL">[ADQL]</a>,
and <code>type_name</code> is one of the type specifiers from the table in Section
2.5 of <a href="#ref_TAP">[TAP]</a>.  Other languages may need different
formalisms, but authors are encouraged to maintain the character of this
definition as closely as possible to help users familiar with the ADQL
definitions make sense of the conventions employed.</p>

<xsl:apply-templates select="//xs:complexType[@name='UserDefinedFunction']" 
  mode="def"/>

<h3 class="toc numbered" id="outforms">Output Formats</h3>

<p>TAP service may offer a variety of output formats.
What output formats are available is defined using the
<code>outputFormat</code> element.   They 
declare a MIME type (see <a href="#ref_RFC2045">[RFC2045]</a>) as well
as aliases (the shorthand forms the server also accepts in the 
FORMAT parameter).  If desired, the format can be further described
using an IVORN; at the time of writing, the TAPRegExt provides keys for
tabledata encoded and binary encoded VOTables.</p>

<xsl:apply-templates select="//xs:complexType[@name='OutputFormat']" 
  mode="def"/>


<h3 class="toc numbered" id="uploadmethods">Upload Methods</h3>

<p>TAP services should allow the upload of VOTables.  They can support
various methods to do this: HTTP upload, retrieval by URL, but also VOSpace
or possibly retrieval using Grid protocols.  Since an actual specification
of the details of such protocols is far beyond the scope of a registry
document and probably would not benefit clients anyway, the upload
methods are given as IVORNs.</p>

<p>IVORNs for the standard upload methods are provided within the
resource record
<code>ivo://ivoa.net/TAPRegExt</code> <span class="redax">(while the registry record is not in place,
it can be examined <a href="http://code.google.com/p/volute/source/browse/trunk/projects/registry/TAPRegExt/tre-vor.xml">in the volute repository</a>).</span>
The actual protocols are 
then fragment identifiers into this document.  If necessary, short descriptions
of the protocols can be obtained from there as well.</p>

<p>It is permitted to register upload methods under different authorities.
The registry records can then provide more in-depth information. For
the upload methods defined in the TAP specification, however, you must
use the IVORNs of the keys in the TAPRegExt resource record to enable
clients to identify supported methods using string comparisons.</p>

<p>At the time of writing, the set of protocol identifiers includes:</p>

<ul>
<li><code>upload-inline</code> -- HTTP upload as per section 2.5.2 of 
<a href="ref_TAP">[TAP]</a>.</li>
<li><code>upload-http</code> -- retrieval from an http URL.</li>
<li><code>upload-https</code> -- retrieval from an https URL.</li>
<li><code>upload-ftp</code> -- retrieval from an ftp URL.</li>
</ul>

<p>Thus, a service offering upload by retrieving from ftp and http URLs
would say:</p>

<pre><![CDATA[
  <uploadMethod ivo-id="ivo://ivoa.net/TAPRegExt/uploadmethods#upload-http"/>
  <uploadMethod ivo-id="ivo://ivoa.net/TAPRegExt/uploadmethods#upload-ftp"/>
]]></pre>

<h3 class="toc numbered" id="reslimits">Resource Limits</h3>

<p>TAP services usually impose certain limits on resource usage by clients,
e.g., a maximum run time per query, or a maximum number of rows in the result
set.  Services typically have some default value for such a limit.  They may
allow raising the limits by means of queries or query parameters (e.g., the
size of the result set is limited by the <code>MAXREC</code> parameter, whereas
the date of job destruction may be changed by adjusting the
<code>destructionTime</code> parameter).  Services may put some limit to how
far the resource limitations may be raised.</p>

<p>The resource limits applying to newly created jobs are given in
<code>default</code> elements, the limits beyond which users cannot
raise the limits are given in <code>hard</code> elements.</p>

<p>The capabilities element allows the declaration of such limits.  These
declarations are primarily intended for human consumption and should give
guidelines.  If a service supports authentication and has different
limits depending on what user is authenticated, it should return the
limits applying to the logged user.</p>

<p>Note that the absence of a specification of limits does not imply that
no limits are enforced.</p>

<h4>Limits on Time</h4>

<p>This document defines two time-like resource limits:</p>

<ul>
<li><code>retentionPeriod</code> -- the time from job creation until
<code>destructionTime</code>; services are free to give the maximum time
the destruction time may be set in the future here.</li>
<li><code>executionDuration</code> -- the maximal run time given to
a query.</li>
</ul>

<p>All values in time-like limits are given in seconds.  Both 
<code>retentionPeriod</code> and <code>executionDuration</code> are of type
<code class="xstype">tr:TimeLimits</code>.</p>

<xsl:apply-templates select="//xs:complexType[@name='TimeLimits']" 
  mode="def"/>

<h4>Limits on Data</h4>

<p>Limits on data work like time limits, including having a 
<code>default</code> and a <code>hard</code> value, except that
both those values have a unit attribute that can either be <code>bytes</code>
or <code>rows</code>.</p>

<p>This document defines two resource limits on data:</p>

<ul>
<li><code>outputLimit</code> -- if <code>unit</code> is <code>rows</code> here,
the <code>default</code> gives the
value of TAP's <code>MAXREC</code> parameter the service will use when none
is specified.</li>
<li><code>uploadLimit</code> -- the maximum size of uploads.  This 
is not a TAP adjustable parameter.  The <code>default</code> value
advises clients about the server's wishes as to the limit above which
some sort of acknowledgement should be requested from the user.  The 
<code>hard</code> limit gives the maximum size of an upload to the 
server.</li>
</ul>

<p>Data limits are defined using the <code class="xstype">tr:DataLimits</code>
and <code class="xstype">tr:DataLimit</code> types:</p>

<xsl:apply-templates select="//xs:complexType[@name='DataLimits']" 
  mode="def"/>
<xsl:apply-templates select="//xs:complexType[@name='DataLimit']" 
  mode="def"/>

<h3 class="toc numbered" id="caprec">The Capability Record</h3>

<p>Using the types defined above, the 
<code class="xstype">tr:TableAccess</code> type can be defined.  Note that
it is a type, not a (global) element.  In instance documents, you
will typically place it in a capability element with an explicit
type specification, like this:</p>

<pre>
  &lt;capability 
    xmlns:tr="http://www.ivoa.net/xml/TAP/v1.0" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    standardID="ivo://ivoa.net/std/TAP" 
    xsi:type="tr:TableAccess"&gt;
    ...
</pre>


<xsl:apply-templates select="//xs:complexType[@name='TableAccess']" 
  mode="def"/>

<h2 class="toc" id="appA">Appendix A: The Full Schema</h2>

<pre><![CDATA[
<!-- INCLUDESCHEMA -->
]]></pre>

<h2 class="toc" id="appB">Appendix B: Implementations</h2>

<p>At the time of writing, the methods and data structures described
in this documents are implemented at and interoperate between:</p>

<ul>
<li><a href="http://dc.ari.uni-heidelberg.de">The GAVO Data Center</a>, in
the TAP service.  The driving software is available for download
at <a href="http://vo.ari.uni-heidelberg.de/soft">http://vo.ari.uni-heidelberg.de/soft</a>.</li>
</ul>

<h2 class="toc" id="appC">Appendix C: Changes from Previous Versions</h2>

<h3>C.1 Changes from WD-20110315</h3>

<ul>
<li>Schema version was bumped to 1.0 (yes, we indulge in unversioned
schema changes before this becomes REC).</li>
<li>uploadLimit interpretation was changed: The default limit is now
"advisory" and to be interpreted as such by clients, the hard limit
is what is actually required by the server.</li>
<li>There's now an optional ivo-id attribute on the version element
within language.</li>
<li>There's now an optional ivo-id attribute on out formats.</li>
</ul>


<h2 class="toc" id="references">References</h2>

<ul class="references">
<li id="ref_ADQL"><a href="http://www.ivoa.net/Documents/latest/ADQL.html">[ADQL]</a>, Pedro Osuna and Inaki Ortiz (eds), 2008: IVOA Astronomical Data Query Language, Version 2.0, IVOA Recommendation</li>
<li id="ref_OT"><a href="FILL-IN">FILL-IN</a> ObsTAP</li>
<li id="ref_REGWG"><a href="http://www.ivoa.net/cgi-bin/twiki/bin/view/IVOA/IvoaResReg">[REGWG]</a> Various: Registry Working Group home page.</li>
<li id="ref_RFC2045"><a href="http://www.ietf.org/rfc/rfc2045.txt">[RFC2045]</a>, N. Freed and N. Borenstein, 1996: "Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies", IETF RFC 2045</li>
<li id="ref_RI"><a href="http://www.ivoa.net/Documents/RegistryInterface/20091104/">[RI]</a> Kevin Benson, Ray Plante,  Elizabeth Auden, Matthew Graham, Gretchen Greene, Marin Hill, Tony Linde, Dave Morris, Wil O'Mullane, Guy Rixon, Kona Andrews, 2008, "IVOA Registry Interfaces v1.0", IVOA Recommendation</li>
<li id="ref_SCHEMA"><a href="http://www.ivoa.net/xml/index.html">[SCHEMA]</a> IVOA Schema Collection</li>
<li id="ref_SRE"><a href="http://www.ivoa.net/Documents/StandardsRegExt/20100519/WD-StandardsRegExt-1.0-20100519.html">[SRE]</a> Paul Harrison (ed), et al, 2010, "StandardsRegExt: a VOResource Schema Extension for Describing IVOA Standards", IVOA Working Draft 19 May 2010</li>
<li id="ref_TAP"><a href="http://www.ivoa.net/Documents/TAP/20100327/REC-TAP-1.0.html">[TAP]</a> Patrick Dowler, Guy Rixon, Doug Tody, 2010: "Table Access Protocol", IVOA Recommendation 27 March 2010</li>
<li id="ref_UWS"><a href="http://www.ivoa.net/Documents/UWS/20101010/REC-UWS-1.0-20101010.pdf">[UWS]</a> Paul Harrison, Guy Rixon, 2010: Universal Worker Service Pattern Version 1.0, IVOA Recommendation 10 October 2010</li>
<li id="ref_VOR"><a href="http://www.ivoa.net/Documents/REC/ReR/VOResource-20080222.html">[VOR]</a> Raymond Plante, Kevin Benson, Matthew Graham, Gretchen Greene, Paul Harrison, Gerard Lemson, Tony Linde, Guy Rixon, Aurélien Stébé, 2008: VOResource: an XML Encoding Schema for Resource Metadata, Version 1.03, IVOA Recommendation 22 February 2008</li>
<li id="ref_VOSI"><a href="http://www.ivoa.net/Documents/VOSI/20101206/PR-VOSI-1.0-20101206.pdf">[VOSI]</a> Matthew Graham, Ray Plante, Guy Rixon (Eds), 2010: IVOA Support Interfaces Version 1.0, IVOA Proposed Recommendation 06 December 2010</li><!-- XXX FIXME: Link to REC when available -->

</ul>



</body></html>

</xsl:template>

</xsl:stylesheet>

<!-- vi: enc=utf-8
-->
